def init_db():
    conn = sqlite3.connect("auto_exotic_billing.db")
    c = conn.cursor()

    # ---------- helper ----------
    def has_column(table, col):
        info = c.execute(f"PRAGMA table_info({table})").fetchall()
        return any(row[1] == col for row in info)  # row[1] = column name

    # ========== CORE TABLES ==========

    # bills (base)
    c.execute("""
      CREATE TABLE IF NOT EXISTS bills (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        employee_cid TEXT,
        customer_cid TEXT,
        billing_type TEXT,
        details TEXT,
        total_amount REAL,
        timestamp TEXT
      )
    """)
    # migrations for bills
    if not has_column("bills", "commission"):
        c.execute("ALTER TABLE bills ADD COLUMN commission REAL DEFAULT 0")
    if not has_column("bills", "tax"):
        c.execute("ALTER TABLE bills ADD COLUMN tax REAL DEFAULT 0")

    # employees (base)
    c.execute("""
      CREATE TABLE IF NOT EXISTS employees (
        cid TEXT PRIMARY KEY,
        name TEXT,
        rank TEXT
      )
    """)
    # migrations for employees
    if not has_column("employees", "rank"):
        c.execute("ALTER TABLE employees ADD COLUMN rank TEXT DEFAULT 'Trainee'")
    if not has_column("employees", "hood"):
        c.execute("ALTER TABLE employees ADD COLUMN hood TEXT DEFAULT 'No Hood'")

    # memberships (active)
    c.execute("""
      CREATE TABLE IF NOT EXISTS memberships (
        customer_cid TEXT PRIMARY KEY,
        tier TEXT,
        dop TEXT
      )
    """)

    # membership history (archived/expired)
    c.execute("""
      CREATE TABLE IF NOT EXISTS membership_history (
        customer_cid TEXT,
        tier TEXT,
        dop TEXT,
        expired_at TEXT
      )
    """)

    # hoods
    c.execute("""
      CREATE TABLE IF NOT EXISTS hoods (
        name TEXT PRIMARY KEY,
        location TEXT
      )
    """)

    # ========== NEW FEATURE TABLES (idempotent) ==========

    # Soft delete store for bills
    c.execute("""
      CREATE TABLE IF NOT EXISTS bills_deleted (
        id INTEGER,
        employee_cid TEXT,
        customer_cid TEXT,
        billing_type TEXT,
        details TEXT,
        total_amount REAL,
        timestamp TEXT,
        commission REAL,
        tax REAL,
        deleted_by TEXT,
        deleted_at TEXT
      )
    """)

    # Audit log
    c.execute("""
      CREATE TABLE IF NOT EXISTS audit_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        action TEXT,           -- e.g. DELETE_BILL, UPDATE_EMP, SHIFT_START, SHIFT_END
        table_name TEXT,
        row_id TEXT,
        actor TEXT,
        ts TEXT,
        old_values TEXT,       -- JSON
        new_values TEXT        -- JSON
      )
    """)

    # Shifts
    c.execute("""
      CREATE TABLE IF NOT EXISTS shifts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        employee_cid TEXT,
        start_ts TEXT,
        end_ts TEXT,
        duration_minutes INTEGER,
        bills_count INTEGER,
        revenue REAL
      )
    """)

    # Loyalty
    c.execute("""
      CREATE TABLE IF NOT EXISTS loyalty (
        customer_cid TEXT PRIMARY KEY,
        points INTEGER DEFAULT 0
      )
    """)
    try:
    # One active (end_ts IS NULL) shift per employee_cid
    c.executescript("""
    CREATE TRIGGER shifts_enforce_single_active
    BEFORE INSERT ON shifts
    WHEN NEW.end_ts IS NULL
    BEGIN
      SELECT
        CASE
          WHEN EXISTS (
            SELECT 1 FROM shifts
            WHERE employee_cid = NEW.employee_cid AND end_ts IS NULL
          )
          THEN RAISE(ABORT, 'Active shift already exists for this employee')
        END;
    END;
    """)
except sqlite3.OperationalError:
    pass

    # ========== INDEXES (safe) ==========
    c.execute("CREATE INDEX IF NOT EXISTS idx_bills_ts ON bills(timestamp)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_bills_emp_ts ON bills(employee_cid, timestamp)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_bills_cust_ts ON bills(customer_cid, timestamp)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_memberships_dop ON memberships(dop)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_membership_hist_exp ON membership_history(expired_at)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_employees_hood ON employees(hood)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_shifts_emp_active ON shifts(employee_cid, end_ts)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_loyalty_points ON loyalty(points)")

    conn.commit()
    conn.close()
